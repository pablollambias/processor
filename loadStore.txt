#Table tests

#Jump Tests

#J 








#LW testing

#LW with 0 offset and base reg 0
ADDIU $1, $0, 16
SW $1, 0($0) #should put 16 into the 0 address in memory
LW $2, 0($0) #should read 16 from 0 address, put it into register 2

#LW with 0 offset and non zero reg
ADDIU $1, $0, 20
ADDIU $2, $0, 16
SW $1, 16($0) #should put 20 into the 16 address in memory
LW $3, 0($2) #should read 20 from 16 address, put into reg 3

#LW with max multiple of 4 offset and reg 0
ADDIU $1, $0, 12
SW $1, 32764($0) #should put 12 into the 32764 address in memory
LW $4, 32764($0) #should read 12 from 32764 address, put into reg 4

#LW with non-zero offset and non-zero reg
ADDIU $1, $0, 24
SW $1, 8($1) #should put 24 into the 20 address in memory
LW $5, 8($1) #should read 24 from 20 address, put into reg 5

#LW with max negative offset, with register max pos
ADDIU $4, $0, 32764
SW $1, -32764($4) # should put 24 into the 0 address in memory
LW $6, -32764($4) #should read 24 from the 0 address in memory

#test that the value that LW loads can be forwarded (two and three instructions away)
LW $7, 0($0) #loads 24 into reg 7
NOP
ADDIU $1, $7, 0 # 1 should get 24
ADDIU $2, $7, 0 # 2 should get 24 

#tests same as set immediately above, but with 0 register
LW $0, 0($0) #loads 24 into reg 0, but doesn't
NOP
ADDIU $3, $0, 0 # 3 should get 0
ADDIU $4, $0, 0 # 4 should get 0 

#load-use hazard, tests stalling (single)
LW $8, 20($0) #loads 24 from 20 address in memory
ADDIU $3, $8, 4 #reg 3 should get 28

#load-use hazard (consecutively)
ADDIU $7, $0, 4
SW $7, 24($0) #puts 4 into 24 address
SW $7, 28($0) #puts 4 into 28 address
LW $9, 20($0) #loads 24 from 20 address in memory
LW $10, 0($9) #loads 4 from 24 address in memory 
LW $11, 24($10) #loads 4 from 28 address in memory

#testing load-use hazard with 0 register
LW $0, 20($0) #loads 24 from 20 address in memory, but doesn't
LW $0, 0($0) #loads 4 from 24 address in memory, but doesn't
LW $0, 24($0) #loads 4 from 28 address in memory, but doesn't


#test until here dog, then check //////////////////////////////////

#LB testing

#LB with 0 offset and base reg 0
ADDIU $1, $0, 16
SW $1, 0($0) #should put 16 into the 0 address in memory
LB $2, 0($0) #should read 16 from 0 address, put it into register 2

#LB with 0 offset and non zero reg
ADDIU $1, $0, 20
ADDIU $2, $0, 16
SW $1, 16($0) #should put 20 into the 16 address in memory
LB $3, 0($2) #should read 20 from 16 address, put into reg 3

#LB with max offset and reg 0
ADDIU $1, $0, 12
SW $1, 32764($0) #should put 12 into the 32764 address in memory
LB $4, 32764($0) #should read 12 from 32767 address, put into reg 4

#LB with non-zero offset and non-zero reg
ADDIU $1, $0, 24
SW $1, 8($1) #should put 24 into the 20 address in memory
LB $5, 8($1) #should read 24 from 20 address, put into reg 5

#LB with max negative offset, with register max pos
ADDIU $4, $0, 32764
SW $1, -32764($4) # should put 24 into the 0 address in memory
LB $6, -32764($4) #should read 24 from the 0 address in memory

#test that the value that LB loads can be forwarded (two and three instructions away)
LB $7, 0($0) #loads 24 into reg 7
NOP
ADDIU $1, $7, 0 # 1 should get 24
ADDIU $2, $7, 0 # 2 should get 24 

#tests same as set immediately above, but with 0 register
LB $0, 0($0) #loads 24 into reg 0, but doesn't
NOP
ADDIU $3, $0, 0 # 3 should get 0
ADDIU $4, $0, 0 # 4 should get 0 

#load-use hazard, tests stalling (single)
LB $8, 20($0) #loads 24 from 20 address in memory
ADDIU $3, $8, 4 #reg 3 should get 28

#load-use hazard (consecutively)
ADDIU $7, $0, 4
SW $7, 24($0) #puts 4 into 24 address
SW $7, 28($0) #puts 4 into 28 address
LB $9, 20($0) #loads 24 from 20 address in memory
LB $10, 0($9) #loads 4 from 24 address in memory 
LB $11, 24($10) #loads 4 from 28 address in memory

#testing load-use hazard with 0 register
LB $0, 20($0) #loads 24 from 20 address in memory, but doesn't
LB $0, 0($0) #loads 4 from 24 address in memory, but doesn't
LB $0, 24($0) #loads 4 from 28 address in memory, but doesn't

#checking that LB loads correct byte and sign extension works properly
ADDIU $12, $0, -11206528 #putting number with 1's and 0's in different order in each byte
SW $12, 4($0) #putting ugly number above into 4 address
LB $13, 4($0) #least sig byte, sign extended= 111111111111111111111111 10000000 hx=FFFFFF80, dec = -128
LB $14, 5($0) #next byte, sign extended= 000000000000000000000000 00000000 hx = 0, dec =0
LB $15, 6($0) #next byte, sign extended= 000000000000000000000000 01010101 hx = 55, dec=85
LB $16, 7($0) #most sig byte, sgn ext = 111111111111111111111111 11111111 hx = FFFFFFFF, dec=-1

#check registers again here /////////////////////////////////////

#LBU testing

#LBU with 0 offset and base reg 0
ADDIU $1, $0, 16
SW $1, 0($0) #should put 16 into the 0 address in memory
LBU $2, 0($0) #should read 16 from 0 address, put it into register 2

#LBU with 0 offset and non zero reg
ADDIU $1, $0, 20
ADDIU $2, $0, 16
SW $1, 16($0) #should put 20 into the 16 address in memory
LBU $3, 0($2) #should read 20 from 16 address, put into reg 3

#LBU with max offset and reg 0
ADDIU $1, $0, 12
SW $1, 32764($0) #should put 12 into the 32767 address in memory
LBU $4, 32764($0) #should read 12 from 32767 address, put into reg 4

#LBU with non-zero offset and non-zero reg
ADDIU $1, $0, 24
SW $1, 8($1) #should put 24 into the 20 address in memory
LBU $5, 8($1) #should read 24 from 20 address, put into reg 5

#LBU with max negative offset, with register max pos
ADDIU $4, $0, 32764
SW $1, -32764($4) # should put 24 into the 0 address in memory
LBU $6, -32764($4) #should read 24 from the 0 address in memory

#test that the value that LBU loads can be forwarded (two and three instructions away)
LBU $7, 0($0) #loads 24 into reg 7
NOP
ADDIU $1, $7, 0 # 1 should get 24
ADDIU $2, $7, 0 # 2 should get 24 

#tests same as set immediately above, but with 0 register
LBU $0, 0($0) #loads 24 into reg 0, but doesn't
NOP
ADDIU $3, $0, 0 # 3 should get 0
ADDIU $4, $0, 0 # 4 should get 0 

#load-use hazard, tests stalling (single)
LBU $8, 20($0) #loads 24 from 20 address in memory
ADDIU $3, $8, 4 #reg 3 should get 28

#load-use hazard (consecutively)
ADDIU $7, $0, 4
SW $7, 24($0) #puts 4 into 24 address
SW $7, 28($0) #puts 4 into 28 address
LBU $9, 20($0) #loads 24 from 20 address in memory
LBU $10, 0($9) #loads 4 from 24 address in memory 
LBU $11, 24($10) #loads 4 from 28 address in memory

#testing load-use hazard with 0 register
LBU $0, 20($0) #loads 24 from 20 address in memory, but doesn't
LBU $0, 0($0) #loads 4 from 24 address in memory, but doesn't
LBU $0, 24($0) #loads 4 from 28 address in memory, but doesn't

#checking that LBU loads correct byte and zero extension works properly
ADDIU $12, $0, -11206528 #putting number with 1's and 0's in different order in each byte
SW $12, 4($0) #putting ugly number above into 4 address
LBU $13, 4($0) #least sig byte, zero extended= 000000000000000000000000 10000000 hx=80, dec = 128
LBU $14, 5($0) #next byte, zero extended= 000000000000000000000000 00000000 hx = 0, dec =0
LBU $15, 6($0) #next byte, zero extended= 000000000000000000000000 01010101 hx = 55, dec=85
LBU $16, 7($0) #most sig byte, zero ext = 000000000000000000000000 11111111 hx = FF, dec=255

#check registers here ///////////////////////////////////

#SW Testing

#SW with 0 offset and base reg 0
ADDIU $1, $0, 16
SW $1, 0($0) #should put 16 into the 0 address in memory

#SW with 0 offset and non zero reg
ADDIU $1, $0, 20
ADDIU $2, $0, 16
SW $1, 16($0) #should put 20 into the 16 address in memory

#SW with max offset and reg 0
ADDIU $1, $0, 12
SW $1, 32764($0) #should put 12 into the 32767 address in memory

#SW with non-zero offset and non-zero reg
ADDIU $1, $0, 24
SW $1, 8($1) #should put 24 into the 20 address in memory

#SW with max negative offset, with register max pos
ADDIU $4, $0, 32764
SW $1, -32764($4) # should put 24 into the 0 address in memory

#testing forwarding to SW args works properly

ADDIU $5, $0, 4
ADDIU $6, $0, 16
SW $6, 0($5) #stores 16 into mem address 4
SW $5, 0($6) #stores 4 into mem address 16

#tests writing to place that has non-zero val
ADDIU $7, $0, 8
SW $7, 0($5) #stores 8 into mem address 4

#check regs here ///////////////////////////////////////

#SB Testing

#SB with 0 offset and base reg 0
ADDIU $1, $0, 16
SB $1, 0($0) #should put 16 into the 0 address in memory

#SB with 0 offset and non zero reg
ADDIU $1, $0, 20
ADDIU $2, $0, 16
SB $1, 16($0) #should put 20 into the 16 address in memory

#SB with max offset and reg 0
ADDIU $1, $0, 12
SB $1, 32767($0) #should put 12 into the 32767 address in memory

#SB with non-zero offset and non-zero reg
ADDIU $1, $0, 24
SB $1, 8($1) #should put 24 into the 20 address in memory

#SB with max negative offset, with register max pos
ADDIU $4, $0, 32764
SB $1, -32764($4) # should put 24 into the 0 address in memory

#testing forwarding to SB args works properly
ADDIU $5, $0, 4
ADDIU $6, $0, 16
SB $6, 0($5) #stores 16 into mem address 4
SB $5, 0($6) #stores 4 into mem address 16

#tests writing to place that has non-zero val
ADDIU $7, $0, 8
SB $7, 0($5) #stores 8 into mem address 4

#tests that byte is stored into correct place
ADDIU $8, $0, 85 #putting byte into reg8, bin of last 8 bits= 01010101
ADDIU $9, $0, -16 #bin = 111111111111111111111111 11110000, only last 8bits will be stored later
ADDIU $10, $0, 15 #another byte, bin of last 8 bits= 00001111
ADDIU $11, $0, 102 #another byte, bin of last 8 bits= 01100110
SB $8, 8($0) #should load bin = 01010101 into least sig byte of word
SB $9, 9($0) #should load bin = 11110000 into second byte of word
SB $10, 10($0) # should load bin = 00001111 into third byte of word
SB $11, 11($0) #should load bin= 01100110 into fourth byte of word

LW $12, 8($0) #should load entire word composed of bytes above. bin = 01100110000011111111000001010101, dec = 1712320597, hex = 660FF055



