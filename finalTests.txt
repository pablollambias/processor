#Immediate Arithmetic Operation.

#ADDIU

ADDIU $0, $1, 5  #0, bc 0 register should stay 0

ADDIU $1, $1, 6  #6

ADDIU $2, $2, 1  #1

ADDIU $3, $3, 2  #2

ADDIU $4, $4, 3  #3

ADDIU $5, $0, 2  #2

ADDIU $6, $6, 1000 #1000

ADDIU $7, $1, 10 #16 6+10=16

ADDIU $8, $0, 32767 #32767, max int to a zero

ADDIU $9, $2, 0 #1

ADDIU $10, $5, 32767 #? adding a max int to a nonzero value

ADDIU $11, $0, -20 #? adding negative to zero

ADDIU $12, $5, -32767 #-32765 adding a min int to a nonzero value

ADDIU $13, $7, 2  #18

ADDIU $14, $7, 2  #18

#ADDIU with hazards

ADDIU $15, $13, 5  #23, WB to EX Forward

ADDIU $16, $15, 3 #26, MEM to Ex Forward

ADDIU $17, $14, 1  #19, checks that register reads on falling edge so write and read from register can happen in same cycle.

#ANDI

ANDI $18, $0, 0 #0, 0 AND 0, testing zero

ANDI $19, $4, 3 #3, 3 AND 3, testing same number

ANDI $20, $6, 1243 #200 , testing a random number(dif numbers)

#ANDI with hazards
ANDI $21, $19, 1 #1? WB to EX Forward

ANDI $22, $21, 3726  #? MEM to EX Forward

ANDI $23, $20, 2893  #?, checks that register reads on falling edge so write and read from register can happen in same cycle.

#ORI
ORI $24, $0, 0 #0, 0 OR 0, testing zero

ORI $25, $20, 200 #200, 200 OR 200, testing same number

ORI $26, $1, 1243 #? , testing a random number(dif numbers)

#ORI with hazards
ORI $27, $25, 1 #? WB to EX Forward

ORI $28, $27, 782  #? MEM to EX Forward

ORI $29, $26, 289  #?, checks that register reads on falling edge so write and read from register can happen in same cycle.










